'''main'''

import tkinter as tk
import random as rd

# les couleurs qu'on peut utiliser dans le jeu:
couleurs = ["red", "blue", "yellow", "green", "white", "black"]

# création de la fenêtre de jeu
racine = tk.Tk()
racine.title("Mastermind")
racine.geometry("1200x1000")

# variables de jeu
canvas = []
empty_circles = []
clicked_colors = []
current_canva = 0
current_circle = 0

# Pour l'interface:
# les canvas roses où le joueur place son code


def create_canvas(racine):
    '''fabrique les 12 canvas avec les emplacements dedans'''
    global circles, canvas
    circles = []
    canvas = []
    for i in range(1, 11):
        canva = tk.Canvas(racine, width=350, height=50, bg="pink")
        canva.grid(row=i, column=2, pady=5)
        canvas.append(canva)
        for j in range(4):
            centre_x = 50 + 60*j
            centre_y = 25
            circle = dessine_cercle(centre_x, centre_y, canva)
            circles.append(circle)
        empty_circles.append(circles)

racine.columnconfigure(0, weight=1)  
racine.columnconfigure(2, weight=1)  
racine.columnconfigure(3, weight=1)


def dessine_cercle(centre_x, centre_y, canva):
    """dessine un cercle sur le canva"""
    return canva.create_oval(centre_x + 20, centre_y + 20,
                             centre_x - 20, centre_y - 20, outline="purple")


def create_buttons():
    '''crée les boutons pour chaque couleur'''
    for i, color in enumerate(couleurs):
        button = tk.Button(racine, bg=color,
                           command=lambda c=color: change_couleur_cercle(c))
        button.grid(row=i+1, column=4)



def create_texte():
    '''pour créer un label qui affiche les textes'''
    global label
    label = tk.Label(racine, text="")
    label.grid(column=5, row=1, rowspan=8)


def affiche_texte(texte):
    '''change le texte dans le label'''
    label.configure(text=texte)

restart_image1=tk.PhotoImage(file="photo/restartimage.png")
button_restart=tk.Button(racine, image=restart_image1, borderwidth=0)
button_restart.place(relx=0.7, rely=0.455)


###############################################################################
# L'algorithme:
# Mode 1 joueur:
# l'ordinateur créé aléatoirement un code couleur secret en utilisant random


def creer_code_secret():
    '''fabrique aléatoirement un code couleur à deviner'''
    le_code_secret = []
    while len(le_code_secret) < 4:
        le_code_secret.append(couleurs[rd.randint(0, 5)])
    return le_code_secret


def change_couleur_cercle(couleur_boutton):
    '''quand on clique sur un boutton ça change la couleur du cercle'''
    global current_canva, current_circle
    if len(clicked_colors) < 4:
        clicked_colors.append(couleur_boutton)
    if current_canva < 10 and current_circle < 4:
        canva = canvas[current_canva]
        canva.itemconfig(empty_circles[current_canva][current_circle],
                         fill=clicked_colors[-1])
        # clicked colors est une liste des couleur du code du joueur qui
        # se remplit au fur et a mesure du choix des couleurs.
        current_circle += 1


# on compare les couleurs entre le code du joueur et le code secret
def compare_couleurs_texte(codejoueur, codesecret):
    '''regarde la couleur et l'emplacement de chaque element du code joueur et affiche un texte'''
    if codejoueur == codesecret:
        affiche_texte("BRAVO, c'est gagné!")
        global GAGNE
        GAGNE = True
    else:
        reponse = ""
        for i in range(4):
            if codejoueur[i] == codesecret[i]:
                reponse += "\n la couleur " + str(i + 1) + " est la bonne couleur au bon emplacement"
            elif codejoueur[i] in codesecret:
                reponse += "\n la couleur " + str(i + 1) + " existe mais n'est pas au bon emplacement"
            else:
                reponse += "\n la couleur " + str(i + 1) + " n'est pas dans le code secret"

        affiche_texte(reponse)


def comparer_codes(guess, secret):
    """Compare le input_code du jouer avec le code genere aleatoirement par le jeu(compare la position)"""
    correct_positions = sum([1 for i in range(4) if guess[i] == secret[i]]) # va rajouter 1 a chaque qu'une couleur est dans la bonne position.
    misplaced_positions = 0
    secret_copy = secret[:]
    guess_copy = guess[:]
    for i in range(4):
        if guess[i] == secret[i]:
            secret_copy[i] = None
            guess_copy[i] = None
    for color in guess_copy:
        if color and color in secret_copy:
            misplaced_positions += 1
            secret_copy[secret_copy.index(color)] = None
    return correct_positions, misplaced_positions


def display_feedback(correct, misplaced, row):
    feedback_canvas = tk.Canvas(racine, width=100, height=50, bg="pink")
    feedback_canvas.grid(row=row+1, column=3)
    for i in range(correct):
        feedback_canvas.create_oval(10 + i * 20, 10, 30 + i * 20, 30, fill="red")
    for i in range(misplaced):
        feedback_canvas.create_oval(10 + (correct + i) * 20, 10, 30 + (correct+i) * 20, 30, fill="white")


# fonction qui commence une nouvelle partie
def nouvelle_partie():
    '''on réinitialise la fenêtre et
    recommence une partie avec nouveau code secret'''
    global GAGNE, code_secret
    GAGNE = False
    if mode == 1:
        code_secret = creer_code_secret()
    if mode == 2:
        code_secret = choisir_code_secret()
    global canvas, empty_circles, clicked_colors, current_canva, current_circle
    canvas = []
    empty_circles = []
    clicked_colors = []
    current_canva = 0
    current_circle = 0
    for widget in racine.winfo_children():
        widget.destroy()
    create_canvas(racine)
    create_buttons()

    tk.Button(racine, text="Retour",command=retour).grid(row=7, column=5)#Marias's genius
    tk.Button(racine, text="Rejouer",command=nouvelle_partie).grid(row=8, column=5) #Maria's ref
    tk.Button(racine, text="Valider", command=compare_couleurs_texte).grid(row=9, column=5)
    create_texte()

    if GAGNE is True:
        affiche_texte("Gagné! Bravo")
        return None
    if current_canva == len(canvas) and GAGNE is False:
        affiche_texte("Perdu!")
        return None


def retour():
    """Fonction qui permet de retourner en arriere"""
    global clicked_colors, current_circle, canvas
    if clicked_colors == []:
        return None
    else:
        clicked_colors.pop()
        current_circle -= 1 
        canvas[current_canva].itemconfig(empty_circles[current_canva][current_circle],
                         fill="pink")   
        

def valider():
    global current_circle, clicked_colors, correct_positions, misplaced_positions, current_canva
    if current_circle == 4:
        # compare_couleurs_texte(clicked_colors, code_secret)
        correct_positions, misplaced_positions = comparer_codes(clicked_colors, code_secret)
        display_feedback(correct_positions, misplaced_positions, current_canva)
        if correct_positions == 4:
            affiche_texte("You win!")
        elif current_canva == 9:
            affiche_texte("Out of attempts!")
        current_canva += 1
        clicked_colors.clear()
        current_circle = 0


def choisir_code_secret():
    '''le deuxieme utilisateur va choisir un code secret'''
    fenetre_code = tk.Tk()
    fenetre_code.title("CHOISIR CODE SECRET")
    cercles2 = []
    canva = tk.Canvas(fenetre_code, width=400, height=80)
    canva.pack(pady=20)
    for i in range(4):
        cercle = canva.create_oval(50 + i * 80, 20, 90 + i * 80, 60, outline="black", width=2, fill="white")
        cercles2.append(cercle)
    boutons = tk.Button(fenetre_code)
    boutons.pack(pady=10)
    for couleur in couleurs:
        couleur = tk.Button(boutons, text=couleur.capitalize(), bg=couleur,
                            command=lambda c=couleurs: change_couleur_cercle(c))
        couleur.pack(side=tk.LEFT, padx=5)
    label_code_secret = tk.Label(fenetre_code, text="", font=(14))
    label_code_secret.pack(pady=10)
    enregistrer_button = tk.Button(fenetre_code, text="Enregistrer Code Secret")
    enregistrer_button.pack(pady=10)
    fenetre_code.mainloop()


tk.Button(racine, text="Welcome to Mastermind", background="pink", font=("Helvetica Black", 12), foreground="maroon",
          command=nouvelle_partie).place(relx=0.42, rely=0.455)


def Mode_1_joueur():
    global mode 
    mode = 1
    nouvelle_partie()


def Mode_2_joueurs():
    global mode 
    mode = 2
    nouvelle_partie()


tk.Button(racine, text="One Player Mode", command=Mode_1_joueur).grid(row=0, column=0)
tk.Button(racine, text="Two Player Mode", command=Mode_2_joueurs).grid(row=1, column=0)

tk.Button(racine, text="One Player Mode", command=Mode_un_joueur).grid(row=0, column=0)
tk.Button(racine, text="Two Player Mode", command=Mode_deux_joueurs).grid(row=1, column=0)

racine.mainloop()


# Arreter la partie quand on aura gagne ou perdu
# Sauvegarder le jeu
# creer une fonction qui récupère code secret (mode deux joueur)
# rendre interface graphique plus jole
